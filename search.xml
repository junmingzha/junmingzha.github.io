<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GPUstack多节点GPU集群环境搭建</title>
      <link href="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="GPUstack多节点GPU集群环境搭建"><a href="#GPUstack多节点GPU集群环境搭建" class="headerlink" title="GPUstack多节点GPU集群环境搭建"></a>GPUstack多节点GPU集群环境搭建</h1><h2 id="1-gpustack介绍"><a href="#1-gpustack介绍" class="headerlink" title="1. gpustack介绍"></a>1. gpustack介绍</h2><p>GPUStack is an open-source GPU cluster manager for running large language models(LLMs).</p><p>Key Features</p><ul><li><strong>Supports a Wide Variety of Hardware:</strong> Run with different brands of GPUs in Apple MacBooks, Windows PCs, and Linux servers.</li><li><strong>Scales with Your GPU Inventory:</strong> Easily add more GPUs or nodes to scale up your operations.</li><li><strong>Lightweight Python Package:</strong> Minimal dependencies and operational overhead.</li><li><strong>OpenAI-compatible APIs:</strong> Serve APIs that are compatible with OpenAI standards.</li><li><strong>User and API key management:</strong> Simplified management of users and API keys.</li><li><strong>GPU metrics monitoring:</strong> Monitor GPU performance and utilization in real-time.</li><li><strong>Token usage and rate metrics:</strong> Track token usage and manage rate limits effectively.</li></ul><p>github地址： <a href="https://github.com/gpustack/gpustack">https://github.com/gpustack/gpustack</a></p><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/gpustack-architecture.png" class="" title="gpustack-architecture"><h2 id="2-编译安装包"><a href="#2-编译安装包" class="headerlink" title="2. 编译安装包"></a>2. 编译安装包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gpustack/gpustack</span><br><span class="line">cd gpustack</span><br><span class="line">make build .</span><br><span class="line"></span><br><span class="line">可以在dist目录下获取安装包</span><br><span class="line">root@aiserver:~/gpustack/dist# ll</span><br><span class="line">total 673996</span><br><span class="line">drwxr-xr-x 2 root root      4096 Sep 13 09:47  ./</span><br><span class="line">drwxr-xr-x 9 root root      4096 Sep 13 09:21  ../</span><br><span class="line">-rw-r--r-- 1 root root 173292517 Sep 13 09:21  gpustack-0.0.0-py3-none-manylinux2014_aarch64.whl</span><br><span class="line">-rw-r--r-- 1 root root 173292514 Sep 13 09:19  gpustack-0.0.0-py3-none-manylinux2014_x86_64.whl</span><br><span class="line">-rw-r--r-- 1 root root 170267641 Sep 13 09:21  gpustack-0.0.0.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 173292514 Sep 13 09:47 &#x27;root@10.0.220.20&#x27;</span><br></pre></td></tr></table></figure><h2 id="3-主节点部署"><a href="#3-主节点部署" class="headerlink" title="3. 主节点部署"></a>3. 主节点部署</h2><p>节点需要有GPU, 安装好了CUDA.</p><p>pip3 install gpustack-0.0.0-py3-none-manylinux2014_x86_64.whl</p><p>执行运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpustack start</span><br></pre></td></tr></table></figure><p>或者：Run GPUStack as a System Service</p><p>vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;gpustack.service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=GPUStack Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=gpustack start</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=3</span><br><span class="line">StandardOutput=append:/var/log/gpustack.log</span><br><span class="line">StandardError=append:/var/log/gpustack.log</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>Then start GPUStack:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable gpustack</span><br></pre></td></tr></table></figure><p>访问页面：</p><p>获取admin的密码：cat &#x2F;var&#x2F;lib&#x2F;gpustack&#x2F;initial_admin_password</p><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914142626493.png" class="" title="image-20240914142626493"><p>查看GPU卡是否正确：</p><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914142806635.png" class="" title="image-20240914142806635"><h2 id="4-第二个节点部署"><a href="#4-第二个节点部署" class="headerlink" title="4. 第二个节点部署"></a>4. 第二个节点部署</h2><p>在另外一个节点执行：</p><p>cat &#x2F;var&#x2F;lib&#x2F;gpustack&#x2F;token</p><p>gpustack start –server-url <a href="http://masterip/">http://masterip</a> –token xxxxx</p><p>可以查看到两个节点：</p><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914143030119.png" class="" title="image-20240914143030119"><h2 id="5-使用"><a href="#5-使用" class="headerlink" title="5. 使用"></a>5. 使用</h2><h3 id="部署模型："><a href="#部署模型：" class="headerlink" title="部署模型："></a><strong>部署模型：</strong></h3><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914143147915.png" class="" title="image-20240914143147915"><h3 id="资源分配，可以支持自动和手动部署，可以支持标签选择节点"><a href="#资源分配，可以支持自动和手动部署，可以支持标签选择节点" class="headerlink" title="资源分配，可以支持自动和手动部署，可以支持标签选择节点"></a>资源分配，可以支持自动和手动部署，可以支持标签选择节点</h3><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914143244037.png" class="" title="image-20240914143244037"><h3 id="可以playground来测试对话"><a href="#可以playground来测试对话" class="headerlink" title="可以playground来测试对话"></a><strong>可以playground来测试对话</strong></h3><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914143351403.png" class="" title="image-20240914143351403"><h3 id="支持API-和-chatgpt兼容的API-可以使用API秘钥访问API"><a href="#支持API-和-chatgpt兼容的API-可以使用API秘钥访问API" class="headerlink" title="支持API, 和 chatgpt兼容的API, 可以使用API秘钥访问API."></a><strong>支持API, 和 chatgpt兼容的API, 可以使用API秘钥访问API.</strong></h3><h3 id="可以查看多个节点和GPU资源使用情况和token使用量"><a href="#可以查看多个节点和GPU资源使用情况和token使用量" class="headerlink" title="可以查看多个节点和GPU资源使用情况和token使用量"></a><strong>可以查看多个节点和GPU资源使用情况和token使用量</strong></h3><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914143550944.png" class="" title="image-20240914143550944"><h3 id="可以创建非管理员用户，只有chat界面和自己的API秘钥"><a href="#可以创建非管理员用户，只有chat界面和自己的API秘钥" class="headerlink" title="可以创建非管理员用户，只有chat界面和自己的API秘钥"></a><strong>可以创建非管理员用户，只有chat界面和自己的API秘钥</strong></h3><img src="/2024/09/14/gpustack%E5%A4%9A%E8%8A%82%E7%82%B9GPU%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/image-20240914143657667.png" class="" title="image-20240914143657667">]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gpu </tag>
            
            <tag> chatgpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openvpn搭建VPN环境实现阿里云，办公和IDC环境互通，方便开发调试</title>
      <link href="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="openvpn搭建VPN环境实现阿里云，办公和IDC环境互通，方便开发调试"><a href="#openvpn搭建VPN环境实现阿里云，办公和IDC环境互通，方便开发调试" class="headerlink" title="openvpn搭建VPN环境实现阿里云，办公和IDC环境互通，方便开发调试"></a>openvpn搭建VPN环境实现阿里云，办公和IDC环境互通，方便开发调试</h1><h2 id="1-目标："><a href="#1-目标：" class="headerlink" title="1. 目标："></a>1. 目标：</h2><img src="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240913111736605.png" class="" title="image-20240913111736605"><p>通过openvpn, 实现阿里云，办公环境，IDC环境的互通。nacos和依赖的一些服务运行在阿里云， 办公环境运行IDEA方便调试代码，也注册到nacos, 可以实现和阿里云的环境的通信在172.16.0.0的阿里云内网。nacos注册有10.8.0.0(vpn网络)的服务和172.16.0.0(阿里云内部网络)的服务，能实现互联互通。ECS2和ECS3没有VPN网络(10.8.0.0)，但可以通过阿里云的VPC的自定义路由实现互通。</p><h2 id="2-openvpn服务环境配置"><a href="#2-openvpn服务环境配置" class="headerlink" title="2. openvpn服务环境配置"></a>2. openvpn服务环境配置</h2><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#下载安装生成证书工具</span><br><span class="line">[root@openvpn ~]# yum install -y easy-rsa #准备证书</span><br><span class="line">[root@openvpn ~]# mkdir /opt/easy-rsa</span><br><span class="line">[root@openvpn ~]# cd /opt/easy-rsa</span><br><span class="line">[root@openvpn /opt/easy-rsa]# cp -a /usr/share/easy-rsa/3.0.7/* ./</span><br><span class="line">[root@openvpn /opt/easy-rsa]# cp -a /usr/share/doc/easy-rsa-3.0.7/vars.example ./vars </span><br><span class="line">#编辑模板文件</span><br><span class="line">[root@openvpn /opt/easy-rsa]# vim vars</span><br><span class="line">set_var EASYRSA_DN &quot;cn_only&quot;</span><br><span class="line">set_var EASYRSA_REQ_COUNTRY &quot;CN&quot;</span><br><span class="line">set_var EASYRSA_REQ_PROVINCE &quot;Shanghai&quot;</span><br><span class="line">set_var EASYRSA_REQ_CITY &quot;Shanghai&quot;</span><br><span class="line">set_var EASYRSA_REQ_ORG &quot;lx&quot;</span><br><span class="line">set_var EASYRSA_REQ_EMAIL &quot;xxxx@qq.com&quot;</span><br><span class="line">set_var EASYRSA_NS_SUPPORT &quot;yes&quot; </span><br><span class="line">#初始化证书</span><br><span class="line">[root@openvpn /opt/easy-rsa]#  ./easyrsa init-pki </span><br><span class="line">#生成根证书 </span><br><span class="line">[root@openvpn /opt/easy-rsa]# ./easyrsa  build-ca</span><br><span class="line">Enter New CA Key Passphrase:  #设置密码， 最多四位数</span><br><span class="line">Re-Enter New CA Key Passphrase:  #确认密码下一步回车即可 </span><br><span class="line">#生成服务端证书 </span><br><span class="line">[root@openvpn /opt/easy-rsa]# ./easyrsa gen-req server  </span><br><span class="line">nopass回车即可 </span><br><span class="line">#给服务端证书签名  </span><br><span class="line">[root@openvpn /opt/easy-rsa]# ./easyrsa  sign server  server</span><br><span class="line">根据提示输入 yes输入跟证书密码 </span><br><span class="line">#生成一个算法</span><br><span class="line">[root@openvpn /opt/easy-rsa]# ./easyrsa  gen-dh </span><br><span class="line">#创建客户端证书 </span><br><span class="line">[root@openvpn /opt/easy-rsa]# ./easyrsa gen-req client nopass </span><br><span class="line">#给客户端证书签名 </span><br><span class="line">[root@openvpn /opt/easy-rsa]# ./easyrsa sign client client </span><br><span class="line">#安装OpenVPN   </span><br><span class="line">[root@openvpn /opt/easy-rsa]# yum install -y openvpn </span><br><span class="line">#配置OpenVPN（把以下内容写入进去）</span><br><span class="line">[root@openvpn /opt/easy-rsa]# vim /etc/openvpn/server.conf</span><br><span class="line">port 1194 #端口</span><br><span class="line">proto udp #协议</span><br><span class="line">dev tun #采用路由隧道模式tun</span><br><span class="line">ca ca.crt #ca证书文件位置</span><br><span class="line">cert server.crt #服务端公钥名称</span><br><span class="line">key server.key #服务端私钥名称</span><br><span class="line">dh dh.pem #交换证书</span><br><span class="line">server 10.8.0.0 255.255.255.0 #给客户端分配地址池，注意：不能和VPN服务器内网网段有相同</span><br><span class="line">push &quot;route 172.16.0.0 255.255.255.0&quot; #允许客户端访问内网172.16.0.0网段</span><br><span class="line">ifconfig-pool-persist ipp.txt #地址池记录文件位置</span><br><span class="line">keepalive 10 120 #存活时间，10秒ping一次,120 如未收到响应则视为断线</span><br><span class="line">max-clients 100 #最多允许100个客户端连接</span><br><span class="line">status openvpn-status.log #日志记录位置</span><br><span class="line">verb 3 #openvpn版本</span><br><span class="line">client-to-client #客户端与客户端之间支持通信</span><br><span class="line">log /var/log/openvpn.log #openvpn日志记录位置</span><br><span class="line">persist-key #通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys。</span><br><span class="line">persist-tun #检测超时后，重新启动VPN，一直保持tun是linkup的。否则网络会先linkdown然后再linkup</span><br><span class="line">duplicate-cn</span><br><span class="line">#拷贝证书 </span><br><span class="line">[root@openvpn /opt/easy-rsa]# cd /etc/openvpn/</span><br><span class="line">[root@openvpn /etc/openvpn]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-x--- 2 root openvpn    6 2020-04-25 05:23 client</span><br><span class="line">drwxr-x--- 2 root openvpn    6 2020-04-25 05:23 server</span><br><span class="line">-rw-r--r-- 1 root root    1029 2020-05-27 10:38 server.conf</span><br><span class="line">[root@openvpn /etc/openvpn]# cp -a /opt/easy-rsa/pki/ca.crt ./</span><br><span class="line">[root@openvpn /etc/openvpn]# cp -a /opt/easy-rsa/pki/issued/server.crt ./</span><br><span class="line">[root@openvpn /etc/openvpn]# cp -a /opt/easy-rsa/pki/private/server.key  ./</span><br><span class="line">[root@openvpn /etc/openvpn]# cp -a /opt/easy-rsa/pki/dh.pem  ./</span><br><span class="line">[root@openvpn /etc/openvpn]# ll</span><br><span class="line">total 24</span><br><span class="line">-rw------- 1 root root    1172 2020-05-27 10:20 ca.crt</span><br><span class="line">drwxr-x--- 2 root openvpn    6 2020-04-25 05:23 client</span><br><span class="line">-rw------- 1 root root     424 2020-05-27 10:26 dh.pem</span><br><span class="line">drwxr-x--- 2 root openvpn    6 2020-04-25 05:23 server</span><br><span class="line">-rw-r--r-- 1 root root    1029 2020-05-27 10:38 server.conf</span><br><span class="line">-rw------- 1 root root    4795 2020-05-27 10:23 server.crt</span><br><span class="line">-rw------- 1 root root    1708 2020-05-27 10:22 server.key </span><br><span class="line">#启动openvpn</span><br><span class="line">[root@openvpn /etc/openvpn]# systemctl  -f enable   openvpn@server.service</span><br><span class="line">[root@openvpn /etc/openvpn]# systemctl  start openvpn@server.service</span><br></pre></td></tr></table></figure><h3 id="导出证书到桌面"><a href="#导出证书到桌面" class="headerlink" title="导出证书到桌面"></a>导出证书到桌面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn /etc/openvpn]# sz /opt/easy-rsa/pki/ca.crt </span><br><span class="line">[root@openvpn /etc/openvpn]# sz /opt/easy-rsa/pki/issued/client.crt </span><br><span class="line">[root@openvpn /etc/openvpn]# sz /opt/easy-rsa/pki/private/client.key </span><br></pre></td></tr></table></figure><h2 id="3-openvpn-client环境配置-需要阿里云的安全组打开1194端口"><a href="#3-openvpn-client环境配置-需要阿里云的安全组打开1194端口" class="headerlink" title="3. openvpn client环境配置(需要阿里云的安全组打开1194端口)"></a>3. openvpn client环境配置(需要阿里云的安全组打开1194端口)</h2><h3 id="3-1-linux客户端"><a href="#3-1-linux客户端" class="headerlink" title="3.1 linux客户端"></a>3.1 linux客户端</h3><h4 id="1-安装openVPN"><a href="#1-安装openVPN" class="headerlink" title="1.安装openVPN"></a>1.安装openVPN</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]# yum install openvpn -y[root@web01 ~]# cd /etc/openvpn/</span><br></pre></td></tr></table></figure><h4 id="2-创建配置文件路径"><a href="#2-创建配置文件路径" class="headerlink" title="2.创建配置文件路径"></a>2.创建配置文件路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 /etc/openvpn]# mkdir config[root@web01 /etc/openvpn]# cd config/</span><br></pre></td></tr></table></figure><h4 id="3-上传证书"><a href="#3-上传证书" class="headerlink" title="3.上传证书"></a>3.上传证书</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 /etc/openvpn/config]# rz -E</span><br><span class="line">[root@web01 /etc/openvpn/config]# ll</span><br><span class="line">-rw-r--r-- 1 root root 1172 9月   1 16:00 ca.crt</span><br><span class="line">-rw-r--r-- 1 root root 4668 9月   1 16:04 client.crt</span><br><span class="line">-rw-r--r-- 1 root root 1704 9月   1 16:03 client.key</span><br></pre></td></tr></table></figure><h4 id="4-编辑client-ovpn文件"><a href="#4-编辑client-ovpn文件" class="headerlink" title="4.编辑client.ovpn文件"></a>4.编辑client.ovpn文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 /etc/openvpn/config]# touch client.ovpn</span><br><span class="line">[root@web01 /etc/openvpn/config]# vim client.ovpn</span><br><span class="line">client #指定当前VPN是客户端</span><br><span class="line">dev tun #使用tun隧道传输协议</span><br><span class="line">proto udp #使用udp协议传输数据</span><br><span class="line">remote 100.100.1.2 1194 #openvpn服务器IP地址端口号</span><br><span class="line">resolv-retry infinite #断线自动重新连接，在网络不稳定的情况下非常有用</span><br><span class="line">nobind #不绑定本地特定的端口号</span><br><span class="line">ca ca.crt #指定CA证书的文件路径</span><br><span class="line">cert client.crt #指定当前客户端的证书文件路径</span><br><span class="line">key client.key #指定当前客户端的私钥文件路径</span><br><span class="line">verb 3 #指定日志文件的记录详细级别，可选0-9，等级越高日志内容越详细</span><br><span class="line">persist-key #通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</span><br><span class="line">persist-tun #检测超时后，重新启动VPN，一直保持tun是linkup的。否则网络会先linkdown然后再linkup</span><br><span class="line">remote-cert-tls server</span><br></pre></td></tr></table></figure><h4 id="5-启动openVPN客户端"><a href="#5-启动openVPN客户端" class="headerlink" title="5.启动openVPN客户端"></a>5.启动openVPN客户端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">后面加个 &amp; 是后台启动</span><br><span class="line">[root@web01 /etc/openvpn/config]# openvpn client.ovpn &amp;</span><br><span class="line">ip config查看会有10.8.0.x的VPN ip.</span><br></pre></td></tr></table></figure><h3 id="3-2-window客户端"><a href="#3-2-window客户端" class="headerlink" title="3.2 window客户端"></a>3.2 window客户端</h3><h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h4><h4 id="2-配置："><a href="#2-配置：" class="headerlink" title="2. 配置："></a>2. 配置：</h4><p>在edit config里配置client</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">#proto udp</span><br><span class="line">proto udp</span><br><span class="line">dev tun</span><br><span class="line">remote 100.100.1.2 1194</span><br><span class="line">#admin</span><br><span class="line">#Huawei@123</span><br><span class="line">#remote 192.168.22.52 1194</span><br><span class="line">#ca ca.crt</span><br><span class="line">#cert CQVPN.crt</span><br><span class="line">#key CQVPN.key</span><br><span class="line">#tls-auth tls.key 1</span><br><span class="line">#粘贴ca.crt到这里</span><br><span class="line">&lt;ca&gt;</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDNTCCAh2gAwIBAgIJAIKQhGLJfk6kMA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV</span><br><span class="line">.....................</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">&lt;/ca&gt;</span><br><span class="line">#粘贴client.crt到这里</span><br><span class="line">&lt;cert&gt;</span><br><span class="line">Certificate:</span><br><span class="line">............</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDkzCCAnugAwIBAgIQDigiUDIwfz/CtLyCDJDedzANBgkqhkiG9w0BAQsFADAW</span><br><span class="line">...................</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">&lt;/cert&gt;</span><br><span class="line">#粘贴client.key到这里</span><br><span class="line">&lt;key&gt;</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCsfbozml82rMFM</span><br><span class="line">903pcC6XN3UDKlwat5QBFJSyILuxol+EU/3s4tPJYYeS/qtFrEtHD6rYa/D8U743</span><br><span class="line">........................</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line">&lt;/key&gt;</span><br><span class="line"></span><br><span class="line">nobind</span><br><span class="line">#key-direction 1</span><br><span class="line">#&lt;tls-auth&gt;</span><br><span class="line">#</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">#mute-replay-warnings</span><br><span class="line"></span><br><span class="line">#keepalive 20 120</span><br><span class="line">#comp-lzo</span><br><span class="line"></span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line">#log-append openvpn.log</span><br><span class="line">#status openvpn-status_UDP.log</span><br><span class="line">#log-append openvpn_UDP.log</span><br><span class="line">verb 3</span><br><span class="line">#mute 20</span><br><span class="line">remote-cert-tls server</span><br></pre></td></tr></table></figure><h4 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h4><p>openvpn在windows环境必须使用管理员模式启动，connect,  查看本地的ip, 会有10.8.0.x的vpn ip.</p><h2 id="4-阿里云环境配置，实现互通"><a href="#4-阿里云环境配置，实现互通" class="headerlink" title="4. 阿里云环境配置，实现互通"></a>4. 阿里云环境配置，实现互通</h2><h3 id="4-1-阿里云的1194端口开通，为连接openvpn服务器"><a href="#4-1-阿里云的1194端口开通，为连接openvpn服务器" class="headerlink" title="4.1 阿里云的1194端口开通，为连接openvpn服务器"></a>4.1 阿里云的1194端口开通，为连接openvpn服务器</h3><p>当前需要配置UDP，不是TCP</p><img src="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240913120633165.png" class="" title="image-20240913120633165"><h3 id="4-2-阿里云的安全组放行10-8-0-0-24网络-为返回的流量放行"><a href="#4-2-阿里云的安全组放行10-8-0-0-24网络-为返回的流量放行" class="headerlink" title="4.2 阿里云的安全组放行10.8.0.0&#x2F;24网络, 为返回的流量放行"></a>4.2 阿里云的安全组放行10.8.0.0&#x2F;24网络, 为返回的流量放行</h3><img src="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240913120818872.png" class="" title="image-20240913120818872"><h3 id="4-3-阿里云的VPC网络自定义路由配置，为返回的流量路由"><a href="#4-3-阿里云的VPC网络自定义路由配置，为返回的流量路由" class="headerlink" title="4.3 阿里云的VPC网络自定义路由配置，为返回的流量路由"></a>4.3 阿里云的VPC网络自定义路由配置，为返回的流量路由</h3><p>为10.8.0.0&#x2F;24路由到下一跳为openvpn服务器的虚拟机，路由生效需要等一会。</p><p>ping ECS2(172.16.0.x)可以通从openvpn的client端</p><img src="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240913121028011.png" class="" title="image-20240913121028011"><h2 id="5-开发调试，Idea运行provider注册到云上的Nacos环境"><a href="#5-开发调试，Idea运行provider注册到云上的Nacos环境" class="headerlink" title="5. 开发调试，Idea运行provider注册到云上的Nacos环境"></a>5. 开发调试，Idea运行provider注册到云上的Nacos环境</h2><p>172.16.0.247:8121为阿里云的nacos环境，因为windows有多个IP, 使用源地址10.8.0.6来注册到nacos, 否则无法互相调用。</p><img src="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240913121434104.png" class="" title="image-20240913121434104"><p>nacos查看，已经注册。</p><img src="/2024/09/13/openvpn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240913121700753.png" class="" title="image-20240913121700753"><p>而且172.16.0.x和10.8.0.x的地址能互相ping通，实现互通。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openvpn </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webstorm+Hexo+Github+typora搭建博客</title>
      <link href="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="webstorm-Hexo-Github-typora搭建博客"><a href="#webstorm-Hexo-Github-typora搭建博客" class="headerlink" title="webstorm+Hexo+Github+typora搭建博客"></a>webstorm+Hexo+Github+typora搭建博客</h2><h3 id="1-1-github配置"><a href="#1-1-github配置" class="headerlink" title="1.1 github配置"></a>1.1 github配置</h3><ol><li><p>配置sshkey，如何配置可以google一下</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829170128805.png" class="" title="image-20240829170128805"></li><li><p>github token创建， 当前的github的用户名和密码不可以使用，必须使用用户名和token来上传</p></li></ol><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829165926472.png" class="" title="image-20240829165926472"><ol start="3"><li><p>创建repo， 名字必须为junmingzha.github.io。后续会在hexo中配置</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829170257010.png" class="" title="image-20240829170257010"></li><li><p>github page发布页面</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829170433305.png" class="" title="image-20240829170433305"></li></ol><h3 id="1-2-webstorm安装hexo插件和创建hexo项目"><a href="#1-2-webstorm安装hexo插件和创建hexo项目" class="headerlink" title="1.2 webstorm安装hexo插件和创建hexo项目"></a>1.2 webstorm安装hexo插件和创建hexo项目</h3><p>可以使用webstorm插件直接创建hexo项目。</p><ol><li>进入<a href="https://plugins.jetbrains.com/plugin/21355-hexo">Hexo - IntelliJ IDEs Plugin | Marketplace</a>，点击箭头所指向的蓝色按钮。<br>如果如图显示<code>Install to WebStorm 2023.3.1</code>，点击即可完成安装。然后直接看下一步。[<img src="/2024/08/29/Github搭建博客/11hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-17249814396262.png"  alt="img" style="zoom:80%;" />](<a href="https://nitchcloche.com/2024/01/27/notes/blog%E6%95%99%E5%AD%A6/github">https://nitchcloche.com/2024/01/27/notes/blog教学/github</a> blog&#x2F;11hexo插件安装.png) 如果显示Get，点击Get，会跳转到版本界面，然后选择最新版下载。<br>下载后，打开Webstorm，选择plugin，右上角小齿轮图标，点击<code>Install Plugin from disk</code>，然后选择刚刚下载的文件进行安装。[<img src="/2024/08/29/Github搭建博客/12hexo%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%852-17249814438523.png"  alt="img" style="zoom:80%;" />](<a href="https://nitchcloche.com/2024/01/27/notes/blog%E6%95%99%E5%AD%A6/github">https://nitchcloche.com/2024/01/27/notes/blog教学/github</a> blog&#x2F;12hexo插件安装2.png) 这样就在Webstorm中将hexo插件安装完毕了。</li><li>在Webstorm的Project页面，点击New Project。[<img src="/2024/08/29/Github搭建博客/13%E6%96%B0%E9%A1%B9%E7%9B%AE-17249814513684.png"  alt="img" style="zoom:80%;" />](<a href="https://nitchcloche.com/2024/01/27/notes/blog%E6%95%99%E5%AD%A6/github">https://nitchcloche.com/2024/01/27/notes/blog教学/github</a> blog&#x2F;13新项目.png)</li><li>选择Hexo，在location处输入你像存放该项目的位置，文件名可以用项目的名字来命名。[<img src="/2024/08/29/Github搭建博客/14hexo%E6%96%B0%E9%A1%B9%E7%9B%AE-17249814544575.png"  alt="img" style="zoom:80%;" />](<a href="https://nitchcloche.com/2024/01/27/notes/blog%E6%95%99%E5%AD%A6/github">https://nitchcloche.com/2024/01/27/notes/blog教学/github</a> blog&#x2F;14hexo新项目.png)</li><li>创建成功[<img src="/2024/08/29/Github搭建博客/15%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F-17249814586706.png"  alt="img" style="zoom:80%;" />](<a href="https://nitchcloche.com/2024/01/27/notes/blog%E6%95%99%E5%AD%A6/github">https://nitchcloche.com/2024/01/27/notes/blog教学/github</a> blog&#x2F;15项目创建成功.png)</li></ol><h3 id="1-3-typora创建markdown文件"><a href="#1-3-typora创建markdown文件" class="headerlink" title="1.3 typora创建markdown文件"></a>1.3 typora创建markdown文件</h3><p>在md文件的最前面需要写以下，为hexo显示文章标题</p><p>title: 除ELK外的12个日志监控工具<br>abbrlink: 26489<br>date: 2024-08-27 12:00:40<br>tags:</p><p>图片的问题解决，图片使用以下设置，会新建一个和md文件同名的目录下存放图片</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829163447820.png" class="" title="image-20240829163447820"><p>把md和图片的目录复制到webstorm的post目录下,  post目录为发布的博客文章</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829163639407.png" class="" title="image-20240829163639407"><h3 id="1-4-Hexo主题配置（当前使用butterfly"><a href="#1-4-Hexo主题配置（当前使用butterfly" class="headerlink" title="1.4 Hexo主题配置（当前使用butterfly)"></a>1.4 Hexo主题配置（当前使用butterfly)</h3><p>在webstorm的terminal端：</p><p>git clone -b master <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">https://gitee.com/immyw/hexo-theme-butterfly.git</a> themes&#x2F;butterfly </p><p>修改 Hexo 根目錄下的 _config.yml，把主題改為 butterfly</p><p>如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>為了減少升級主題後帶來的不便，請使用以下方法（建議，可以不做）。</p><p>在 hexo 的根目錄創建一個文件 _config.butterfly.yml，並把主題目錄的 _config.yml 內容複製到 _config.butterfly.yml 去。( 注意: 複製的是主題的 _config.yml ，而不是 hexo 的 _config.yml)</p><p><strong>Hexo Butterfly 文章置顶插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p><strong>Hexo</strong> <strong>Butterfly 本地搜索插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>添加配置 在全局配置文件_config.yml文件中添加配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search</span>:</span><br><span class="line">  <span class="attr">path</span>: search.<span class="property">xml</span></span><br><span class="line">  <span class="attr">field</span>: post # <span class="attr">post</span>:文章范围、<span class="attr">page</span>:页面范围、<span class="attr">all</span>:覆盖所有</span><br><span class="line">  <span class="attr">content</span>: <span class="literal">true</span> # 内容是否包含每一篇文章的全部内容</span><br><span class="line">  <span class="attr">format</span>: html</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>根目录记得创建一个search.xml</p><p>也可自行下载，下载地址：<a href="https://github.com/wzpan/hexo-generator-search/blob/master/demo_output/search.xml">https://github.com/wzpan/hexo-generator-search/blob/master/demo_output/search.xml</a></p><p><a href="https://notion.so/signed/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F573f817c-91e0-40c7-9889-3cbf26da4876%2F24f0a168-2cd4-4728-ba8a-c506f8306cfb%2Fsearch.xml?table=block&id=703acbc5-b9f2-4171-90cd-83113a9f4f31">search.xml63.3KB</a></p><p>同时修改主题配置文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  # <span class="title class_">Preload</span> the search data when the page loads.</span><br><span class="line">  <span class="attr">preload</span>: <span class="literal">true</span></span><br><span class="line">  # <span class="title class_">Show</span> top n results per article, show all results by setting to -<span class="number">1</span></span><br><span class="line">  <span class="attr">top_n_per_article</span>: <span class="number">1</span></span><br><span class="line">  # <span class="title class_">Unescape</span> html strings to the readable one.</span><br><span class="line">  <span class="attr">unescape</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">CDN</span>:</span><br></pre></td></tr></table></figure><h3 id="1-5-hexo的-config-yml配置"><a href="#1-5-hexo的-config-yml配置" class="headerlink" title="1.5 hexo的_config.yml配置"></a>1.5 hexo的_config.yml配置</h3><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829165113549.png" class="" title="image-20240829165113549"><ol><li>配置github的域名，必须这样配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: https://junmingzha.github.io/</span><br></pre></td></tr></table></figure><ol start="2"><li><p>解决typora的图片的问题</p><p>npm install hexo-image-link –save</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><ol start="3"><li><p>上传github的配置</p><p>npm install hexo-deployer-git –save</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/junmingzha/junmingzha.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="1-6-Hexo本地运行，查看博客"><a href="#1-6-Hexo本地运行，查看博客" class="headerlink" title="1.6 Hexo本地运行，查看博客"></a>1.6 Hexo本地运行，查看博客</h3><p>webstorm的terminal执行</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>访问link, 本地查看博客</p><h3 id="1-7-上传到github"><a href="#1-7-上传到github" class="headerlink" title="1.7 上传到github"></a>1.7 上传到github</h3><p>webstorm的terminal执行: hexo d,  上传到github上，会提示输入用户和密码，输入用户名和token</p><p>上传成功后，可以查看到代码在repo下，然后：</p><p>github page发布页面</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829170433305-17249246946781.png" class="" title="image-20240829170433305"><p>可以访问junmingzha.github.io来访问博客</p><h3 id="1-8-设置域名"><a href="#1-8-设置域名" class="headerlink" title="1.8 设置域名"></a>1.8 设置域名</h3><p>当前华为云域名服务上配置：</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829172120431.png" class="" title="image-20240829172120431"><p>在github上允许域名配置</p><img src="/2024/08/29/Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240829172158444.png" class="" title="image-20240829172158444"><p>可以通过blog.junmingzhao.xyz访问博客</p><h3 id="1-9-更新博客"><a href="#1-9-更新博客" class="headerlink" title="1.9 更新博客"></a>1.9 更新博客</h3><p>先typora创建新的md, 然后hexo clean, hexo g, hexo s来本地查看新的博客， 然后再通过webstorm的hexo d来更新github上的博客，</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>除ELK外的12个日志监控工具</title>
      <link href="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="除ELK外的12个日志监控工具"><a href="#除ELK外的12个日志监控工具" class="headerlink" title="除ELK外的12个日志监控工具"></a>除ELK外的12个日志监控工具</h1><h2 id="Loki"><a href="#Loki" class="headerlink" title="Loki"></a>Loki</h2><p>Loki 是 Grafana 实验室开发的开源日志聚合工具。它受到 Prometheus 的启发，旨在实现成本效益和易于操作。但 Loki 也有一些局限性，您可能需要探索一些 Loki 替代方案来进行日志分析。在本文中，我们将介绍 11 种可以用作 Loki 替代方案的日志管理工具。</p><p>Loki 的设计目标是保持较低的索引量。它通过使用标签来实现这一点。标签是任何可用于描述日志流的键值对。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">system</span></span><br><span class="line">   <span class="attr">pipeline_stages:</span></span><br><span class="line">   <span class="attr">static_configs:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br><span class="line">     <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">job:</span> <span class="string">syslog</span></span><br><span class="line">      <span class="attr">__path__:</span> <span class="string">/var/log/syslog</span></span><br></pre></td></tr></table></figure><p>上述配置将允许您使用 查询日志流<code>&#123;job=syslog&#125;</code>。标签充当 Loki 日志数据的索引，并保持较低的复杂性。但 Loki 不支持高基数。例如，如果您为用户的 IP 地址创建标签，您将拥有数千个日志流，因为每个用户都有一个唯一的 IP。这会使 Loki 非常慢，因为它需要构建一个巨大的索引。</p><p>Loki 日志管理的完整堆栈还有另外两个工具：用于收集日志的 Promtail 和用于可视化日志数据的 Grafana。通常，这个堆栈被称为 PLG 堆栈。如果 Loki 不符合您的要求，请查看用于日志管理的 11 个最佳 Loki 替代方案。</p><h2 id="SigNoz（开源）"><a href="#SigNoz（开源）" class="headerlink" title="SigNoz（开源）"></a>SigNoz（开源）</h2><p><a href="https://signoz.io/">SigNoz</a>是一款提供日志收集和分析功能的全栈开源 APM。SigNoz 使用列式数据库 ClickHouse 来存储日志，该数据库在提取和存储日志数据方面非常高效。ClickHouse 旨在通过高级查询实现更快的分析。它支持索引高基数数据，而 Loki 不支持。</p><p>ClickHouse 等列式数据库在存储日志数据并使其可供分析方面非常有效。Uber和<a href="https://blog.cloudflare.com/log-analytics-using-clickhouse/">Cloudflare</a>等大公司已转向使用 ClickHouse 进行日志分析<a href="https://www.uber.com/en-IN/blog/logging/">。</a></p><p>Loki 支持对象存储中的数据，因此复杂的聚合速度不够快。SigNoz 将数据存储在磁盘上，因此查询速度更快。</p><p>SigNoz 使用 OpenTelemetry 来检测应用程序。OpenTelemetry 由 CNCF 提供支持，正悄然成为检测云原生应用程序的全球标准。SigNoz 中的日志选项卡具有高级功能，例如日志查询生成器、跨多个字段搜索、结构化表视图、JSON 视图等。</p><img src="/2024/08/27/日志监控工具/signoz_logs-172473907892514.webp" />*SigNoz 中的日志管理*<p>您还可以通过实时尾部日志记录实时查看日志。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/signoz_live_logs.webp" class="" title="SigNoz 中的实时尾部记录">*SigNoz 中的实时尾部记录*<p>使用高级日志查询生成器，您可以通过混合搭配的字段快速过滤出日志。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/signoz_log_query_builder.webp" class="" title="SigNoz 中的高级日志查询生成器">*SigNoz 中的高级日志查询生成器*<p>SigNoz 的使用非常简单。只需使用简单的安装脚本，只需三步即可将其安装在 macOS 或 Linux 计算机上。</p><p>安装脚本会自动在 Linux 上安装 Docker Engine。但是在 macOS 上，您必须在运行安装脚本之前手动安装<a href="https://docs.docker.com/engine/install/">Docker Engine 。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/SigNoz/signoz.git</span><br><span class="line"><span class="built_in">cd</span> signoz/deploy/</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h2 id="Logz-io"><a href="#Logz-io" class="headerlink" title="Logz.io"></a>Logz.io</h2><p><a href="http://logz.io/">Logz.io</a>提供基于 ELK 堆栈的云托管服务。它基于 OpenSearch 和 OpenSearch 仪表板，它们分别是 Elasticsearch 和 Kibana 的开源版本。您可以使用可视化和仪表板监控您的日志，同时设置警报以通知您的团队。</p><p>Logz.io 提供不同的层级来高效存储日志。关键数据保存在实时层，活动数据保存在智能层，带有归档功能的历史层。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/logzio_log_management.webp" class="" title="logzio 日志管理仪表板">*Logz.io 管理仪表板*<h2 id="Graylog（开源）"><a href="#Graylog（开源）" class="headerlink" title="Graylog（开源）"></a>Graylog（开源）</h2><p><a href="https://www.graylog.org/">Graylog是一个集中式日志管理平台，提供两种解决方案 - 日志管理和安全信息事件管理 (SIEM)。Graylog 还提供了一个名为</a><a href="https://www.graylog.org/products/open-source">Graylog Open 的</a>开源版本。Graylog Open 提供收集、存储和分析日志数据所需的核心集中式日志管理功能。</p><p>开源版本可以免费下载和使用，其他解决方案则需要联系销售人员。您可以<a href="https://www.graylog.org/pricing/">在此处</a>找到更多详细信息。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/graylog_logs_management.webp" class="" title="Graylog 日志管理仪表板">*Graylog 日志管理仪表板*<h2 id="Logtail"><a href="#Logtail" class="headerlink" title="Logtail"></a>Logtail</h2><p><a href="https://betterstack.com/logtail">LogTail</a>基于 OLAP 数据库 ClickHouse 提供与 SQL 兼容的结构化日志管理。在 Logtail 中，您可以通过编写自定义 SQL 查询来分析日志。您还可以将 Logtail 直接连接到任何 BI 工具。对于可视化，它提供了托管的 Grafana 仪表板，您可以使用它来创建自定义图表和仪表板。</p><p>您还可以将审计日志存档到 S3 Glacier 或其他流行的数据存储中。Logtail的<a href="https://betterstack.com/logtail/pricing">定价</a>为每 GB 0.25 美元起。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/logtail_log_management.webp" class="" title="LogTail 日志管理仪表板">*LogTail 日志管理仪表板*<h2 id="Sumo-Logic"><a href="#Sumo-Logic" class="headerlink" title="Sumo Logic"></a>Sumo Logic</h2><p><a href="https://www.sumologic.com/solutions/log-management/">Sumo Logic</a>是一个 SaaS 分析平台，其功能之一就是提供日志管理。Sumo Logic 为 NGINX、Kubernetes、Docker 等多种技术提供了一组预构建的仪表板。</p><p>例如，在 Docker 主机上安装 Sumo Logic 收集器容器后，您可以在 Sumo Logic 仪表板中看到数据源。设置数据源后，您可以直接访问 Docker 仪表板。您可以<a href="https://www.sumologic.com/pricing/">在此处</a>找到定价详细信息。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/sumo_logic_log_management.webp" class="" title="Sumo Logic 中 Docker Logs 中的 Docker 仪表板">*Sumo Logic 中 Docker Logs 中的 Docker 仪表板*<h2 id="Splunk"><a href="#Splunk" class="headerlink" title="Splunk"></a>Splunk</h2><p>Splunk 是领先的基于云的日志分析产品之一。Splunk <a href="https://www.splunk.com/en_us/products/log-observer.html">Log Observer</a>可用于从 Kubernetes、Fluentd、AWS 服务等热门来源收集日志数据。它为日志提供了无代码搜索体验，可用于减少 MTTR。</p><p>日志数据还可以转换为指标，为实时仪表板和警报提供支持。日志数据可以与跟踪属性关联，以便更快地进行故障排除。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/splunk_log_observer.webp" class="" title="Splunk Log Observer（来源：Splunk 网站）">*Splunk Log Observer（来源：Splunk 网站）*<h2 id="Loggly"><a href="#Loggly" class="headerlink" title="Loggly"></a>Loggly</h2><p><a href="https://www.loggly.com/">Loggly</a>是一项基于云的日志监控和分析服务。在底层，Loggly 使用 Elasticsearch 作为其处理的所有日志数据的主要存储和搜索引擎。Loggly 支持大量日志源，可帮助您快速上手。</p><p>Loggly 可帮助您将日志与指标关联起来并设置警报以在出现关键问题时收到通知。价格从每月 79 美元起。您可以<a href="https://www.loggly.com/plans-and-pricing/">在此处</a>找到更多详细信息。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/loggly_log_management.webp" class="" title="Loggly 日志管理仪表板">*Loggly 日志管理仪表板（来源：Loggly 网站）*<h2 id="Sematext"><a href="#Sematext" class="headerlink" title="Sematext"></a>Sematext</h2><p><a href="https://sematext.com/logsene/">Sematext</a>提供日志管理服务，您可以将其用作 Loki 的替代方案。它提供了一个托管的 ELK 堆栈，您无需维护或扩展。它的集中式日志管理解决方案允许您使用 Elasticsearch API 创建自己的查询。它还提供了更简单的查询语法。</p><p>它支持通过电子邮件、slack、Pagerduty 和其他各种第三方集成发送警报。您可以使用 Logstash、Filebeat 或 Logagent 发送日志数据。您还可以使用任何与 Elasticsearch 的 REST API 兼容的工具。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/sematext_logs_management.webp" class="" title="Sematext 日志管理仪表板">*Sematext 日志管理仪表板*<h2 id="DataDog"><a href="#DataDog" class="headerlink" title="DataDog"></a>DataDog</h2><p><a href="https://www.datadoghq.com/product/log-management/">DataDog</a>是一个基于 SaaS 的数据分析平台，其功能之一就是提供日志分析。它可以用作 Elastic Stack 的替代品。DataDog 将日志提取与日志索引分离开来，从而允许您提取所有日志。它提供了一个日志浏览器，您可以使用它来探索和分析日志。</p><p>使用日志浏览器，您可以搜索和过滤日志，将查询到的日志分组到更高级别的实体中。您还可以创建日志可视化，以便更快地排除故障。</p><p>DataDog 是一款全栈可观察性解决方案，您可以使用整套产品，也可以只选择其日志管理产品。定价为每 GB 未压缩数据 0.10 美元起。您可以<a href="https://www.datadoghq.com/pricing/">在此处</a>找到更多详细信息。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/datadog_log_management.webp" class="" title="DataDog 中的日志浏览器">*DataDog 中的日志浏览器*<h2 id="New-Relic"><a href="#New-Relic" class="headerlink" title="New Relic"></a>New Relic</h2><p><a href="https://newrelic.com/platform/log-management">New Relic</a>提供日志管理功能，可快速搜索日志。您可以创建自定义图表和仪表板并设置警报以接收关键问题通知。New Relic 还提供许多其他产品，如基础设施监控、网络监控、浏览器监控等。使用其他平台，您可以查看带有上下文的日志。</p><p>它可让您将日志数据与其余应用程序和基础架构数据连接起来。如果您使用 New Relic 的 APM 代理，则可以直接将日志数据转发到 New Relic，而无需使用任何第三方工具。New Relic 的<a href="https://newrelic.com/pricing">定价</a>基于所摄取的数据量和用户席位。您还可以使用此<a href="https://newrelic.com/blog/nerdlog/estimate-data-cost">成本估算器</a>来估算您的成本。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/newrelic_log_management.webp" class="" title="New Relic 中的日志管理仪表板">*New Relic 中的日志管理仪表板*<h2 id="Mezmo-以前称为-LogDNA"><a href="#Mezmo-以前称为-LogDNA" class="headerlink" title="Mezmo (以前称为 LogDNA)"></a>Mezmo (以前称为 LogDNA)</h2><p><a href="https://www.mezmo.com/elk-replacement">Mezmo</a>提供了一种易于使用且可扩展的解决方案，可用作 ELK 堆栈的替代方案。您可以使用日志查看器搜索和过滤日志。搜索将在整个日志行中进行，但如果指定，您也可以在特定字段上进行搜索。搜索完日志后，您可以将其保存为视图，并在满足某些条件时设置警报。</p><p>Mezmo 还提供了一项名为 Kubernetes enrichment 的功能，该功能将 Kubernetes 事件、资源指标和日志集中在一个仪表板下。Mezmo 的定价为每 GB 0.80 美元起，保留 3 天。您可以<a href="https://www.mezmo.com/pricing">在此处</a>找到更多详细信息。</p><img src="/2024/08/27/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/mezmo_log_management.webp" class="" title="Mezmo 仪表板提供来自日志的见解">*Mezmo 仪表板提供来自日志的见解*<h2 id="选择正确的日志分析工具"><a href="#选择正确的日志分析工具" class="headerlink" title="选择正确的日志分析工具"></a>选择正确的日志分析工具</h2><p>分析日志数据最具挑战性的部分之一是生成的数据量。有效的日志分析工具应该能够高效地收集和存储大量数据。一旦数据被收集和存储，日志分析工具就可以发挥作用了。让用户能够快速搜索日志并运行查询和复杂的聚合来确定其应用程序或基础设施中问题的根本原因是一个好的日志分析工具的关键方面。</p><p>在选择日志分析工具时，应牢记一些因素。</p><ul><li>该工具存储日志的效率如何？</li><li>您能多快运行复杂的查询和聚合？</li><li>使用 UI 分析来自多个来源的日志数据有多容易？</li><li>该工具是否提供将日志数据与其他遥测信号（如指标和跟踪）关联的功能，以获得更深入的见解？</li></ul><p>SigNoz 支持高效的日志存储，提供直观的用户界面，并允许您将日志与跟踪和指标关联起来，以便更快地进行分析。由于它使用列式数据库，因此运行聚合的速度也更快。SigNoz 也是开源的，可以在您的基础设施内自行托管。</p>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
